// Code generated by counterfeiter. DO NOT EDIT.
package imagetransformserverfakes

import (
	"context"
	"sync"

	"github.com/chadius/image-transform-server/rpc/transform/github.com/chadius/image_transform_server"
)

type FakeImageTransformer struct {
	TransformStub        func(context.Context, *image_transform_server.DataStreams) (*image_transform_server.Image, error)
	transformMutex       sync.RWMutex
	transformArgsForCall []struct {
		arg1 context.Context
		arg2 *image_transform_server.DataStreams
	}
	transformReturns struct {
		result1 *image_transform_server.Image
		result2 error
	}
	transformReturnsOnCall map[int]struct {
		result1 *image_transform_server.Image
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImageTransformer) Transform(arg1 context.Context, arg2 *image_transform_server.DataStreams) (*image_transform_server.Image, error) {
	fake.transformMutex.Lock()
	ret, specificReturn := fake.transformReturnsOnCall[len(fake.transformArgsForCall)]
	fake.transformArgsForCall = append(fake.transformArgsForCall, struct {
		arg1 context.Context
		arg2 *image_transform_server.DataStreams
	}{arg1, arg2})
	stub := fake.TransformStub
	fakeReturns := fake.transformReturns
	fake.recordInvocation("Transform", []interface{}{arg1, arg2})
	fake.transformMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImageTransformer) TransformCallCount() int {
	fake.transformMutex.RLock()
	defer fake.transformMutex.RUnlock()
	return len(fake.transformArgsForCall)
}

func (fake *FakeImageTransformer) TransformCalls(stub func(context.Context, *image_transform_server.DataStreams) (*image_transform_server.Image, error)) {
	fake.transformMutex.Lock()
	defer fake.transformMutex.Unlock()
	fake.TransformStub = stub
}

func (fake *FakeImageTransformer) TransformArgsForCall(i int) (context.Context, *image_transform_server.DataStreams) {
	fake.transformMutex.RLock()
	defer fake.transformMutex.RUnlock()
	argsForCall := fake.transformArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeImageTransformer) TransformReturns(result1 *image_transform_server.Image, result2 error) {
	fake.transformMutex.Lock()
	defer fake.transformMutex.Unlock()
	fake.TransformStub = nil
	fake.transformReturns = struct {
		result1 *image_transform_server.Image
		result2 error
	}{result1, result2}
}

func (fake *FakeImageTransformer) TransformReturnsOnCall(i int, result1 *image_transform_server.Image, result2 error) {
	fake.transformMutex.Lock()
	defer fake.transformMutex.Unlock()
	fake.TransformStub = nil
	if fake.transformReturnsOnCall == nil {
		fake.transformReturnsOnCall = make(map[int]struct {
			result1 *image_transform_server.Image
			result2 error
		})
	}
	fake.transformReturnsOnCall[i] = struct {
		result1 *image_transform_server.Image
		result2 error
	}{result1, result2}
}

func (fake *FakeImageTransformer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.transformMutex.RLock()
	defer fake.transformMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeImageTransformer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ image_transform_server.ImageTransformer = new(FakeImageTransformer)
